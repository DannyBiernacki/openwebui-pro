---
description: 
globs: 
alwaysApply: false
---
---
type: always
description: M4 Pro optimized development guidelines for OpenWebUI Pro
version: 1.0
---

# Professional Development Guidelines - OpenWebUI Pro 2025

## Language & Communication
- **ALWAYS respond in Polish**
- Twoim celem jest pomóc mi osiągnąć mój cel. Nie tylko odpowiadaj – prowadź mnie
- Jeśli czegoś nie umiesz – powiedz, że nie umiesz

## System Context
- Machine: MacBook Pro M4 Pro (14 cores, 48GB RAM)
- Project: /Volumes/T9/openwebui-pro
- Architecture: ARM64 optimization required

## Professional Standards Enforcement (NEW)
**CRITICAL: Follow Enterprise-Grade Standards ONLY**

### Component Standards Hierarchy:
1. **shadcn/ui component** (FIRST CHOICE - industry standard)
2. **Extend shadcn/ui** with composition (if customization needed)
3. **Radix UI primitive** (if shadcn doesn't have it)
4. **NEVER create custom components** without checking shadcn/ui first

### Code Quality Enforcement:
- **ZERO custom CSS classes** - use Tailwind utilities only
- **ZERO improvised colors** - use CSS Variables from design tokens
- **ALWAYS use cn() utility** for conditional classes
- **shadcn/ui patterns ONLY** - no reinventing wheels

## Dependencies & Code Generation Flow
1. **NAJPIERW** check shadcn/ui documentation
2. **INSTALL** required shadcn/ui components
3. **THEN** install other dependencies (npm, pnpm, bun)
4. **FINALLY** generate code using established patterns

## Design System Standards (NEW)
- **Design Tokens**: Use CSS Variables only (--primary, --background, etc.)
- **Typography**: Inter (UI) + JetBrains Mono (code) - no custom fonts
- **Colors**: CSS Variables from shadcn/ui theme system
- **Spacing**: Tailwind spacing scale only (p-4, m-2, gap-6, etc.)
- **Components**: shadcn/ui + proper TypeScript interfaces

## Professional Component Pattern:
```typescript
// ✅ CORRECT - Professional Standard
import { Button } from "@/components/ui/button"
import { cn } from "@/lib/utils"

interface AIButtonProps extends React.ComponentProps<typeof Button> {
  isProcessing?: boolean
}

export const AIButton = ({ isProcessing, className, ...props }: AIButtonProps) => (
  <Button 
    className={cn(
      isProcessing && "opacity-70 cursor-wait",
      className
    )}
    disabled={isProcessing}
    {...props}
  />
)

// ❌ WRONG - Never do this
<button className="bg-blue-500 px-4 py-2 rounded-lg hover:bg-blue-600">
```

## Documentation Standards
- Every shadcn/ui component: document customizations
- Design tokens: document all CSS Variables used
- Component props: full TypeScript interfaces with JSDoc
- Patterns: document composition over custom creation

## Quality Gates (UPDATED)
Before ANY component creation:
1. [ ] Checked shadcn/ui documentation
2. [ ] Used existing shadcn/ui component
3. [ ] Applied design tokens only
4. [ ] Added TypeScript interface
5. [ ] Included accessibility features
6. [ ] Added @test-case annotation
7. [ ] NO custom CSS classes used

## AI Partnership Philosophy
- AI follows professional standards religiously
- No improvisation or "quick fixes"
- Always suggest industry-standard solutions
- End with: "Don't forget to commit!" + Conventional Commits

## Git Commit Standards (Conventional Commits)
- feat(component): add new AI streaming component
- fix(api): resolve Ollama connection timeout
- docs(readme): update setup instructions
- refactor(utils): optimize vector search performance
- style(tailwind): add AI-specific design tokens
- test(unit): add comprehensive AI service tests
- chore(deps): update dependencies to latest versions

## Tech Stack (2025 Optimized)
- Frontend: Next.js 14 + TypeScript + Tailwind + shadcn/ui
- Backend: Fastify (not Express) - 70% faster
- Database: PostgreSQL + Drizzle ORM
- Vector DB: Qdrant (open source)
- AI: Ollama (local 70B) + OpenAI (fallback)
- Auth: Lucia (TypeScript-first)
## M4 Pro Optimizations
- Use 48GB RAM for larger AI models
- Leverage 10 performance cores
- ARM64 native packages preferred
- Concurrent AI processing enabled

## Development Flow
1. Write tests first (TDD)
2. Implement with M4 Pro optimizations
3. Verify performance targets
4. Document and commit
```
