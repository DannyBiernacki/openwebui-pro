---
description: 
globs: 
alwaysApply: false
---
```mdc
---
type: agent_requested
description: Comprehensive testing strategy and TDD implementation
version: 1.0
---
# Testing Strategy - Test-Driven Development

## TDD Philosophy z AI
- **ZAWSZE** write tests FIRST, then implementation
- Iterate until all tests pass
- AI partnership w testing: verify, don't assume

## Testing Hierarchy
1. **Unit Tests**: Individual functions/components
2. **Integration Tests**: API endpoints, service interactions  
3. **E2E Tests**: Critical user flows (all 3 UI modes)
4. **Performance Tests**: AI response times, bundle size
5. **Accessibility Tests**: Screen reader, keyboard navigation

## Coverage Requirements
- Minimum 80% code coverage
- 100% coverage dla critical AI paths
- All edge cases i error scenarios
- Mock external dependencies (Ollama, OpenAI APIs)

## AI-Specific Testing
- WebSocket streaming response tests
- Model switching workflow tests
- Vector search accuracy tests
- Voice input integration tests
- Error handling z fallback scenarios

## M4 Pro Testing Optimizations
- Parallel test execution (wykorzystaj 14 cores)
- Large model testing scenarios
- Performance benchmarks
- Memory usage validation

## Test Automation
- GitHub Actions integration
- Pre-commit hooks dla test validation
- Coverage reporting z badges
- Performance benchmarking

# Professional Testing Strategy 2025

## Component Testing Standards
Test shadcn/ui component integration:

```typescript
// Test custom components built on shadcn/ui
import { render, screen } from '@testing-library/react'
import { AIButton } from '@/components/ai/ai-button'

describe('AIButton', () => {
  it('should extend shadcn/ui Button correctly', () => {
    render(<AIButton isProcessing>Test</AIButton>)
    
    // Test shadcn/ui Button base functionality
    expect(screen.getByRole('button')).toBeInTheDocument()
    expect(screen.getByRole('button')).toBeDisabled()
    
    // Test custom extension
    expect(screen.getByText('Test')).toBeInTheDocument()
  })
})
```

## Testing Patterns
- **Component Integration**: Test shadcn/ui + custom logic
- **Design Token Usage**: Verify CSS Variables applied correctly  
- **Accessibility**: Test built-in shadcn/ui accessibility
- **TypeScript**: Ensure interface compliance

## Quality Gates
- [ ] All tests pass
- [ ] shadcn/ui components used correctly
- [ ] Design tokens applied properly
- [ ] TypeScript interfaces validated
- [ ] Accessibility standards met
```
